{"version":3,"sources":["components/Heading.js","context/AppReducer.js","context/GlobalState.js","components/UserList.js","components/Home.js","components/AddUser.js","components/EditUser.js","App.js","serviceWorker.js","index.js"],"names":["Heading","Navbar","color","dark","Container","NavbarBrand","href","Nav","NavItem","className","to","state","action","type","users","filter","user","id","payload","updateUser","map","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","removeUser","addUser","editUser","UserList","useContext","ListGroup","length","ListGroupItem","key","name","Button","onClick","Home","AddUser","useState","setName","history","useHistory","Form","onSubmit","newUser","uuid","push","FormGroup","Label","Input","onChange","e","target","placeholder","EditUser","props","selectedUser","setSelectedUser","currentUserId","match","params","useEffect","userId","find","App","style","maxWidth","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7def10b0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    NavItem,\r\n    NavbarBrand,\r\n    Container\r\n} from 'reactstrap';\r\n\r\nexport const Heading = () => {\r\n    return (\r\n        <Navbar color =\"dark\" dark>\r\n            <Container>\r\n                <NavbarBrand href=\"/\">My Team</NavbarBrand>\r\n                <Nav>\r\n                    <NavItem>\r\n                        <Link className=\"btn btn-primary\" to=\"/add\">Add User</Link>\r\n                    </NavItem>\r\n                </Nav>\r\n            </Container>\r\n           \r\n        </Navbar>\r\n    )\r\n}","export default (state, action) => {\r\n    switch(action.type) {\r\n        case 'REMOVE_USER':\r\n            return {\r\n                users: state.users.filter(user => {\r\n                    return user.id !== action.payload\r\n                })\r\n            }\r\n\r\n            case 'ADD_USER':\r\n                return {\r\n                    users:[action.payload, ...state.users]\r\n                }\r\n            case 'EDIT_USER':\r\n                const updateUser = action.payload;\r\n                \r\n                const updateUsers = state.users.map(user =>{\r\n                    if(user.id === updateUser.id) {\r\n                        return updateUser;\r\n                    }\r\n                    return user;\r\n                })\r\n\r\n                return {\r\n                    users: updateUsers\r\n                }\r\n\r\n                \r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext , useReducer} from 'react';\r\nimport AppReducer from './AppReducer';\r\n\r\n//Initial State\r\nconst initialState = {\r\n    users: [  ]\r\n};\r\n\r\n// Create Context\r\nexport const GlobalContext = createContext(initialState);\r\n\r\n//Provider Component\r\nexport const GlobalProvider = ({children}) => {\r\n    const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n    //Actions\r\n    const removeUser = (id) => {\r\n        dispatch({\r\n            type: 'REMOVE_USER',\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    const addUser = (user) => {\r\n        dispatch({\r\n            type: 'ADD_USER',\r\n            payload: user\r\n        })\r\n    }\r\n\r\n    const editUser = (user) => {\r\n        dispatch({\r\n            type: 'EDIT_USER',\r\n            payload: user\r\n            \r\n        })\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value ={{\r\n            users: state.users,\r\n            removeUser ,\r\n            addUser,\r\n            editUser\r\n        }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    )\r\n}","import React, {useContext} from 'react';\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport { Link } from 'react-router-dom';\r\nimport {    \r\n    ListGroup,\r\n    ListGroupItem,\r\n    Button\r\n} from 'reactstrap';\r\n\r\nexport const UserList = () => {\r\n    const { users, removeUser} = useContext(GlobalContext);\r\n\r\n    return (\r\n       <ListGroup className =\"mt-4\">\r\n           {users.length > 0 ? (\r\n               <>\r\n                 {users.map(user => (\r\n                <ListGroupItem className=\"d-flex\" key={user.id}>\r\n                    <strong>{user.name}</strong>\r\n                    <div className = \"ml-auto\">\r\n                        <Link className=\"btn btn-warning mr-1\" \r\n                        to = {`/edit/${user.id}`}>Edit</Link>\r\n                        <Button onClick ={() => removeUser(user.id)} \r\n                                color=\"danger\">Delete</Button>\r\n                        </div>\r\n                        </ListGroupItem>             \r\n                    ))}\r\n               </>\r\n           ) : (\r\n               <h4 className=\"text-center\">No User</h4>\r\n           )}\r\n\r\n         \r\n       </ListGroup>\r\n    )\r\n}","import React from 'react';\r\nimport { Heading } from './Heading';\r\nimport { UserList } from './UserList';\r\n\r\nexport const Home = () => {\r\n    return (\r\n        <div>\r\n            <Heading />\r\n            <UserList />\r\n        </div>\r\n    )\r\n}","import React , {useState,useContext} from 'react';\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\n\r\n\r\nexport const AddUser = () => {\r\n    const [name, setName] = useState('');\r\n    const { addUser } = useContext(GlobalContext);\r\n    const history = useHistory();\r\n\r\n\r\n    const onSubmit = () => {\r\n        const newUser = {\r\n            id: uuid(),\r\n            name\r\n        }\r\n        addUser(newUser);\r\n        history.push('/');\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    return(\r\n        <Form onSubmit ={onSubmit}>\r\n            <FormGroup>\r\n                <Label>Name</Label>\r\n                <Input type =\"text\" value={name} onChange={onChange} \r\n                placeholder=\"Enter Name\"></Input>\r\n            </FormGroup>\r\n            <Button type=\"submit\">Submit</Button>\r\n            <Link to=\"/\" className=\"btn btn-danger ml-2\">Cannel</Link>\r\n        </Form>\r\n    )\r\n}","import React , {useState,useContext , useEffect} from 'react';\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Form, FormGroup, Label, Input, Button } from 'reactstrap';\r\n\r\n\r\nexport const EditUser = (props) => {\r\n\r\n    const [selectedUser, setSelectedUser] = useState({\r\n        id: '',\r\n        name: ''\r\n    });\r\n    const { users , editUser } = useContext(GlobalContext);\r\n    const history = useHistory();\r\n    const currentUserId = props.match.params.id;\r\n\r\n    useEffect(() => {\r\n        const userId = currentUserId;\r\n        const selectedUser = users.find(user => user.id === userId)\r\n        setSelectedUser(selectedUser)   \r\n    },[currentUserId, users])\r\n\r\n\r\n    const onSubmit = () => {\r\n        editUser(selectedUser)\r\n\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const onChange = (e) => {\r\n        setSelectedUser({...selectedUser,[e.target.name]: e.target.value})\r\n    }\r\n\r\n    return(\r\n        <Form onSubmit={onSubmit}>\r\n        <FormGroup>\r\n            <Label>Name</Label>\r\n            <Input type =\"text\" name=\"name\" value = {selectedUser.name} onChange = {onChange} \r\n            placeholder=\"Enter Name\"></Input>\r\n        </FormGroup>\r\n        <Button type=\"submit\">Edit Name</Button>\r\n        <Link to=\"/\" className=\"btn btn-danger ml-2\">Cannel</Link>\r\n    </Form>\r\n    )\r\n}","import React from 'react';\nimport { BrowserRouter as Router , Switch , Route } from 'react-router-dom';\nimport { Home } from './components/Home';\nimport { AddUser } from './components/AddUser';\nimport { EditUser } from './components/EditUser';\nimport {GlobalProvider} from './context/GlobalState';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div style={{ maxWidth: \"30rem\", margin:\"4rem auto\" }}>\n      <GlobalProvider>\n      <Router>\n        <Switch>\n          <Route exact path= \"/\" component = {Home} />\n          <Route path= \"/add\" component = {AddUser} />\n          <Route path= \"/edit/:id\" component = {EditUser} />\n        </Switch>\n      </Router>\n        \n      </GlobalProvider>\n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}